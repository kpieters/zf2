<?php
/**
 * Zend Framework (http://framework.zend.com/)
 *
 * @link      http://github.com/zendframework/zf2 for the canonical source repository
 * @copyright Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)
 * @license   http://framework.zend.com/license/new-bsd New BSD License
 * @package   Zend_Paginator
 */

namespace ZendTest\Paginator\Adapter;

use Zend\Paginator\Adapter;
use Zend\Db\Adapter as DbAdapter;
use Zend\Db\Sql;
use Zend\Paginator\Exception;

require_once __DIR__ . '/../_files/TestTable.php';

/**
 * @category   Zend
 * @package    Zend_Paginator
 * @subpackage UnitTests
 * @group      Zend_Paginator
 */
class DbSelectTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Zend\Db\Adapter\DbSelect
     */
    protected $_adapter;

    /**
     * @var Zend\Db\Adapter\Adapter
     */
    protected $_db;

    /**
     * @var \Zend\Db\Sql\Sql
     */
    protected $_sql;

    /**
     * @var \Zend\Db\Sql\Select
     */
    protected $_query;

    /**
     * @var \Zend\Db\TableGateway\TableGateway
     */
    protected $_table;

    /**
     * Prepares the environment before running a test.
     */
    protected function setUp()
    {
        if (!extension_loaded('pdo_sqlite')) {
            $this->markTestSkipped('Pdo_Sqlite extension is not loaded');
        }

        parent::setUp();

        $this->_db = new DbAdapter\Adapter(array(
                                                'driver'   => 'Pdo_Sqlite',
                                                'database' =>  __DIR__ . '/../_files/test.sqlite',
                                           ));

        $this->_table = new \ZendTest\Paginator\TestAsset\TestTable('test', $this->_db);

        $this->_query = new Sql\Select;
        $this->_query->from('test')
            ->order('number ASC'); // ZF-3740
        //->limit(1000, 0); // ZF-3727

        $this->_sql = new Sql\Sql($this->_db);

        $this->_adapter = new Adapter\DbSelect(array(
                                                    'select_query' => $this->_query,
                                                    'db_adapter'   => $this->_db,
                                               ), 'dbquery');
    }
    /**
     * Cleans up the environment after running a test.
     */
    protected function tearDown()
    {
        $this->_adapter = null;
        parent::tearDown();
    }

    public function testGetsItemsAtOffsetZero()
    {
        $actual = $this->_adapter->getItems(0, 10);

        $i = 1;
        foreach ($actual as $item) {
            $this->assertEquals($i, $item['number']);
            $i++;
        }
    }

    public function testGetsItemsAtOffsetTen()
    {
        $actual = $this->_adapter->getItems(10, 10);

        $i = 11;
        foreach ($actual as $item) {
            $this->assertEquals($i, $item['number']);
            $i++;
        }
    }

    public function testAcceptsIntegerValueForRowCount()
    {
        $this->_adapter->setRowCount(101);
        $this->assertEquals(101, $this->_adapter->count());
    }

    public function testThrowsExceptionIfInvalidQuerySuppliedForRowCount()
    {
        $this->setExpectedException('Zend\Paginator\Adapter\Exception\InvalidArgumentException', 'Row count column not found');
        $select = $this->_sql->select();
        $select->from('test');
        $this->_adapter->setRowCount($select);
    }

    public function testThrowsExceptionIfInvalidQuerySuppliedForRowCount2()
    {
        $wrongcolumn = $this->_db->getPlatform()->quoteIdentifier('wrongcolumn');
        $expr = new Sql\Expression("COUNT(*) AS $wrongcolumn");
        $query = new Sql\Select;
        $query->from('test');

        $this->setExpectedException('Zend\Paginator\Adapter\Exception\InvalidArgumentException', 'Row count column not found');
        $this->_adapter->setRowCount($query);
    }

    public function testAcceptsQueryForRowCount()
    {
        $row_count_column = $this->_db->getPlatform()->quoteIdentifier(Adapter\DbSelect::ROW_COUNT_COLUMN);
        $expression = new Sql\Expression("COUNT(*) AS $row_count_column");

        $rowCount = clone $this->_query;
        $rowCount->columns(array($expression));

        $this->_adapter->setRowCount($rowCount);

        $this->assertEquals(500, $this->_adapter->count());
    }

    public function testThrowsExceptionIfInvalidRowCountValueSupplied()
    {
        $this->setExpectedException('Zend\Paginator\Adapter\Exception\InvalidArgumentException', 'Invalid row count');
        $this->_adapter->setRowCount('invalid');
    }

    public function testReturnsCorrectCountWithAutogeneratedQuery()
    {
        $expected = 500;
        $actual = $this->_adapter->count();

        $this->assertEquals($expected, $actual);
    }

    public function testDbTableSelectDoesNotThrowException()
    {
        $adapter = new Adapter\DbSelect(array(
                                             'db_adapter'   => $this->_db,
                                             'select_query' => $this->_table->getSql()->select(),
                                        ), 'dbselect');
        $count = $adapter->count();
        $this->assertEquals(500, $count);
    }

    /**
     * @group ZF-4001
     */
    public function testGroupByQueryReturnsOneRow()
    {
        $query = new Sql\Select;
        $query->from('test')
            ->order('number ASC')
            ->limit(1000, 0)
            ->group('number');

        $adapter = new Adapter\DbSelect(array(
                                             'db_adapter'   => $this->_db,
                                             'select_query' => $query,
                                        ), 'dbselect');

        $this->assertEquals(500, $adapter->count());
    }

    /**
     * @group ZF-4001
     */
    public function testGroupByQueryOnEmptyTableReturnsRowCountZero()
    {
        $db = new DbAdapter\Adapter(array(
                                         'driver'   => 'Pdo_Sqlite',
                                         'database' =>  __DIR__ . '/../_files/testempty.sqlite',
                                    ));

        $query = new Sql\Select;
        $query->from('test')
            ->order('number ASC')
            ->limit(1000, 0);
        $adapter = new Adapter\DbSelect(array(
                                             'db_adapter'   => $db,
                                             'select_query' => $query,
                                        ), 'dbselect');

        $this->assertEquals(0, $adapter->count());
    }

    /**
     * @group ZF-4001
     */
    public function testGroupByQueryReturnsCorrectResult()
    {
        $query = new Sql\Select;
        $query->from('test')
            ->order('number ASC')
            ->limit(1000, 0)
            ->group('testgroup');
        $adapter = new Adapter\DbSelect(array(
                                             'db_adapter'   => $this->_db,
                                             'select_query' => $query,
                                        ), 'dbselect');


        $this->assertEquals(2, $adapter->count());
    }

    /**
     * @group ZF-4032
     */
    public function testDistinctColumnQueryReturnsCorrectResult()
    {
        $this->markTestSkipped('Distinct not fully implemented (ZF2-424)');
        $query = new Sql\Select;
        $query->from('test')
//              ->distinct()
            ->order('number ASC')
            ->limit(1000, 0);
        $adapter = new Adapter\DbSelect(array(
                                             'db_adapter'   => $this->_db,
                                             'select_query' => $query,
                                        ), 'dbselect');

        $this->assertEquals(2, $adapter->count());
    }

    /**
     * @group ZF-4094
     */
    public function testSelectSpecificColumns()
    {
        $number = $this->_db->getPlatform()->quoteIdentifier('number');
        $query = $this->_sql->select()->from('test', array('testgroup', 'number'))
            ->where("$number >= ?", '1');
        $adapter = new Adapter\DbSelect(array(
                                             'db_adapter'   => $this->_db,
                                             'select_query' => $query,
                                        ), 'dbselect');


        $this->assertEquals(500, $adapter->count());
    }

    /**
     * @group ZF-4177
     */
    public function testSelectDistinctAllUsesRegularCountAll()
    {
        $query = $this->_sql->select()->from('test');
        //->distinct();
        $adapter = new Adapter\DbSelect(array(
                                             'db_adapter'   => $this->_db,
                                             'select_query' => $query,
                                        ), 'dbselect');


        $this->assertEquals(500, $adapter->count());
    }

    /**
     * @group ZF-5233
     */
    public function testSelectHasAliasedColumns()
    {
        $this->markTestSkipped('Not clear yet how to fix this');
        $db = $this->_db;

        $db->query('DROP TABLE IF EXISTS `sandboxTransaction`');
        $db->query('DROP TABLE IF EXISTS `sandboxForeign`');

        // A transaction table
        $db->query(
            'CREATE TABLE `sandboxTransaction` (
                `id` INTEGER PRIMARY KEY,
                `foreign_id` INT( 1 ) NOT NULL ,
                `name` TEXT NOT NULL
            ) '
        );

        // A foreign table
        $db->query(
            'CREATE TABLE `sandboxForeign` (
                `id` INTEGER PRIMARY KEY,
                `name` TEXT NOT NULL
            ) '
        );

        // Insert some data
        $db->insert('sandboxTransaction',
            array(
                 'foreign_id' => 1,
                 'name' => 'transaction 1 with foreign_id 1',
            )
        );

        $db->insert('sandboxTransaction',
            array(
                 'foreign_id' => 1,
                 'name' => 'transaction 2 with foreign_id 1',
            )
        );

        $db->insert('sandboxForeign',
            array(
                 'name' => 'John Doe',
            )
        );

        $db->insert('sandboxForeign',
            array(
                 'name' => 'Jane Smith',
            )
        );

        $query = $db->select()->from(array('a'=>'sandboxTransaction'), array())
            ->join(array('b'=>'sandboxForeign'), 'a.foreign_id = b.id', array('name'))
            ->distinct(true);

        $adapter = new Adapter\DbSelect(array(
                                             'db_adapter'   => $this->_db,
                                             'select_query' => $query,
                                        ), 'dbselect');

        $this->assertEquals(1, $adapter->count());
    }

    /**
     * @group ZF-5295
     */
    public function testMultipleDistinctColumns()
    {
        $this->markTestSkipped('Distinct not fully implemented (ZF2-424)');

        $expr = new Sql\Expression("DISTINCT testgroup ");
        $select = new Sql\Select;
        $select->from('test')
            ->columns(array($expr, 'testgroup', 'number'));

        $adapter = new Adapter\DbSelect(array(
                                             'db_adapter'   => $this->_db,
                                             'select_query' => $select,
                                        ), 'dbselect');

        $expected = 'SELECT COUNT(1) AS "zend_paginator_row_count" FROM (SELECT DISTINCT "test"."testgroup", "test"."number" FROM "test") AS "t"';

        $this->assertEquals($expected, $adapter->getCountSelect()->getSqlString());
        $this->assertEquals(500, $adapter->count());
    }

    /**
     * @group ZF-5295
     */
    public function testSingleDistinctColumn()
    {
        $this->markTestSkipped('Distinct not fully implemented (ZF2-424)');
        $select = $this->_sql->select()->from('test')
            ->columns(array('testgroup'));

        $adapter = new Adapter\DbSelect(array(
                                             'db_adapter'   => $this->_db,
                                             'select_query' => $select,
                                        ), 'dbselect');


        $expected = 'SELECT COUNT(DISTINCT "test"."testgroup") AS "zend_paginator_row_count" FROM "test"';

        $this->assertEquals($expected, $adapter->getCountSelect()->getSqlString());
        $this->assertEquals(2, $adapter->count());
    }

    /**
     * @group ZF-6330
     */
    public function testGroupByMultipleColumns()
    {
        $select = $this->_sql->select()->from('test')
            ->columns(array('testgroup'))
            ->group(array('number', 'testgroup'));

        $adapter = new Adapter\DbSelect(array(
                                             'db_adapter'   => $this->_db,
                                             'select_query' => $select,
                                        ), 'dbselect');

        $expected = 'SELECT COUNT(1) AS "zend_paginator_row_count" FROM (SELECT "test"."testgroup" FROM "test" GROUP BY "number"' . ",\n\t" . '"testgroup") AS "t"';

        $this->assertEquals($expected, $adapter->getCountSelect()->getSqlString());
        $this->assertEquals(500, $adapter->count());
    }

    /**
     * @group ZF-6330
     */
    public function testGroupBySingleColumn()
    {
        $select = $this->_sql->select()->from('test')
            ->columns(array('testgroup'))
            ->group('test.testgroup');

        $adapter = new Adapter\DbSelect(array(
                                             'db_adapter'   => $this->_db,
                                             'select_query' => $select,
                                        ), 'dbselect');


        $expected = 'SELECT COUNT(DISTINCT "test"."testgroup") AS "zend_paginator_row_count" FROM "test"';

        $this->assertEquals($expected, $adapter->getCountSelect()->getSqlString());
        $this->assertEquals(2, $adapter->count());
    }

    /**
     * @group ZF-6562
     */
    public function testSelectWithHaving()
    {
        $select = $this->_sql->select()->from('test')
            ->group('number')
            ->having('number > 250');

        $adapter = new Adapter\DbSelect(array(
                                             'db_adapter'   => $this->_db,
                                             'select_query' => $select,
                                        ), 'dbselect');


        $expected = 'SELECT COUNT(1) AS "zend_paginator_row_count" FROM (SELECT "test".* FROM "test" GROUP BY "number" HAVING (number > 250)) AS "t"';

        $this->assertEquals($expected, $adapter->getCountSelect()->getSqlString());
        $this->assertEquals(250, $adapter->count());
    }

    /**
     * @group ZF-7127
     */
    public function testMultipleGroupSelect()
    {
        $select = $this->_sql->select()->from('test')
            ->group('testgroup')
            ->group('number')
            ->where('number > 250');

        $adapter = new Adapter\DbSelect(array(
                                             'db_adapter'   => $this->_db,
                                             'select_query' => $select,
                                        ), 'dbselect');


        $expected = 'SELECT COUNT(1) AS "zend_paginator_row_count" FROM (SELECT "test".* FROM "test" WHERE (number > 250) GROUP BY "testgroup"' . ",\n\t" . '"number") AS "t"';

        $this->assertEquals($expected, $adapter->getCountSelect()->getSqlString());
        $this->assertEquals(250, $adapter->count());
    }

}